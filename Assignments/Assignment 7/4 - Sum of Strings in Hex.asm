.MODEL SMALL
.STACK 100H

.DATA
INV DB 0AH, 0DH, 'INVALID INPUT', 0AH, 0DH, '$'
IN1 DB 'ENTER STRING OF DECIMAL: $'
SUM DB 0AH, 0DH, 'SUM: $'
CNT DB 0

.CODE
MAIN PROC
    ; INITIALIZING DS
    MOV AX, @DATA
    MOV DS, AX
    
    RESET:      ; CLEARING REGISTERS
    XOR AX, AX
    XOR BX, BX
    XOR CX, CX
    XOR DX, DX
    
    INPUT:
    LEA DX, IN1
    MOV AH, 9
    INT 21H
    
    NEXT:
    MOV AH, 1
    INT 21H
    
    ; COMPARISON
    CMP AL, 0DH ; IF INP == RETURN
    JNE COMP    ; IF INP != RETURN -> COMP()
    CMP CX, 0   ; IF THERE HASN'T BEEN ANY INPUT YET
    JE INVALID  ; IF INP == RETURN && CX == 0 -> INVALID()
    JMP OUTPUT  ; IF INP == RETURN && CX != 0 -> OUTPUT()
    
    COMP:
    CMP AL, '0'
    JL INVALID  ; IF INP < '0' -> INVALID()
    
    CMP AL, '9'
    JG INVALID  ; IF INP > '9' -> INVALID()
    
    SUMMING:    ; SUMS EACH INPUT OF THE STRING
    INC CX      ; UPDATES IF THERE IS AN INPUT
    SUB AL, 30H ; MAKES THE ACQUIRED INPUT INTEGER
    ADD BL, AL  ; ADDS INPUT TO BL
    JMP NEXT    ; RETURNS FOR NEXT INPUT
    
    OUTPUT:
    LEA DX, SUM
    MOV AH, 9
    INT 21H
    
    MOV AH, 2
    MOV CX, 4   ; LOOPS 4 TIMES FOR 4 BITS
    
    RESULT:
    MOV CNT, 4  ; SETS COUNTER TO 4 FOR CONVERSION OF EACH DIGIT
    XOR DL, DL  ; CLEARING DX FOR EVERY LOOP
    
    CONV:    
    SHL BX, 1   ; CONVERTS EACH BIT TO HEX BY RUNNING IT 4 TIMES
    RCL DL, 1
    DEC CNT
    JNZ CONV    ; UPDATES EACH ONE TO 16 BITS
    
    CMP DL, 9   ; CHECKS IF INP IS NUMBER
    JLE NUMB    ; IF INP <= 9 -> NUMBER_CONVERSION()
    SUB DL, 9   ; RESETS THE VALUE BY 9
    OR DL, 40H  ; SETS THE VALUE TO 4X ON DL FOR A-F
    JMP PRINT  
    
    NUMB:
    OR DL, 30H  ; SETS THE VALUE TO 3X ON DL
    
    PRINT:
    INT 21H
    
    LOOP RESULT ; LOOPS UNTIL END OF BITS IS REACHED  
    
    JMP EXIT
        
    INVALID:
    LEA DX, INV
    MOV AH, 9
    INT 21H
    JMP RESET
    
    EXIT:
    MOV AH,4CH
    INT 21H
    END MAIN