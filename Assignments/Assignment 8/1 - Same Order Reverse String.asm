.MODEL SMALL
.STACK 100H

.DATA
INP DB 'PLEASE ENTER ANY STRING: $'
REV DB 0AH, 0DH, 'REVERSED: $'
CNT DW 1

.CODE
CLR PROC        ; CLEARING REGISTERS
    XOR AX, AX
    XOR BX, BX
    XOR CX, CX
    XOR DX, DX
    RET
ENDP CLR

OUTPUT PROC     ; MAIN OUTPUT
    LEA DX, REV
    MOV AH, 9
    INT 21H
    
    MOV AH, 2
    MOV CNT, 0
    
    REVERSE:    ; OPPOSITE OF REPLICATE; USING THE ORIGINAL STACK TO KEEP THE ORDER SAME
    XCHG BX, SP
    POP DX
    XCHG BX, SP
    CMP DL, 20H
    JE SPACE    ; IF TOS == SPACE -> SPACE()
    PUSH DX     ; ELSE PUSH TOS TO THE ORIGINAL STACK
    INC CNT     ; KEEPS TRACK OF NUMBER OF CHARS UNTIL SPACE
    LOOP REVERSE
    
    SPACE:      ; FOR KEEPING ORDER SAME
    POP DX
    INT 21H
    DEC CNT
    JNZ SPACE   ; LOOPS UNTIL SPACE WAS FOUND
    
    MOV DL, 20H ; PRINTING SPACE
    INT 21H
    DEC CX      ; THIS COUNTS AS AN ITERATION OF REVERSE
    JNZ REVERSE
    RET
ENDP OUTPUT
    
    

MAIN PROC
    ; INITIALIZING DS
    MOV AX, @DATA
    MOV DS, AX
    
    CALL CLR
    
    INPUT:
    LEA DX, INP
    MOV AH, 9
    INT 21H
    
    MOV AH, 1
    
    NEXT:
    INT 21H
    CMP AL, 0DH
    JE PREREP   ; IF INP == RETURN -> PRE_REPLICATE()
    INC CX      ; EACH INPUT INCREASES THE LOOP COUNTER
    PUSH AX     
    JMP NEXT    ; FOR NEXT INPUT
    
    PREREP:     ; INITIALIZING THINGS FOR THE REPLICATION
    MOV BX, 50H ; SETS THE VALUE TO THE ADDRESS OF HALF OF THE STACK
    XCHG BX,SP  ; SWAPS ADDRESS OF TOP OF STACK WITH 50H TO MAKE TWO STACKS TO WORK WITH
    PUSH 0020H  ; A SPACE TO PREVENT INFINITE LOOP
    XCHG BX,SP  ; SWAPS BACK TO THE ORIGINAL ADDRESS OF THE TOP OF THE STACK
    
    REPLICATE:  ; REPLICATES THE ORIGINAL INPUT INTO THE NEW STACK (FROM 50H)
    POP DX
    XCHG BX, SP
    PUSH DX
    XCHG BX, SP
    INC CNT
    LOOP REPLICATE
    
    MOV CX, CNT ; CNT KEEPS TRACK OF HOW MANY PUSHES HAPPENED
    
    CALL OUTPUT ; CALLS THE MAIN OUTPUT

    EXIT:
    MOV AH,4CH
    INT 21H
    END MAIN