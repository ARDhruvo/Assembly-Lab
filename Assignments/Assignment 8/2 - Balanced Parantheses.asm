.MODEL SMALL
.STACK 100H

.DATA
INV DB 0AH, 0DH, 'TOO MANY CLOSING BRACKETS. TRY AGAIN', 0AH, 0DH , '$'
INP DB 'ENTER EQUATION: $'
COR DB 0AH, 0DH, 'EXPRESSION IS CORRECT$'
LEF DB 0AH, 0DH, 'TOO MANY LEFT BRACKETS'
AGN DB 0AH, 0DH, 'PRESS Y TO TRY AGAIN', 0AH, 0DH , '$' 
NEW DB 0AH, 0DH , '$'

.CODE 
RESET PROC        ; CLEARING REGISTERS
    XOR AX, AX
    XOR BX, BX
    XOR CX, CX
    XOR DX, DX
    RET
ENDP CLR

MAIN PROC
    ; INITIALIZING DS
    MOV AX, @DATA
    MOV DS, AX
    
    START:
    CALL RESET
    MOV CX, SP    
    MOV AH, 9
    LEA DX, INP
    INT 21H
    
    INPUT:
    MOV AH, 1
    
    NEXT:
    INT 21H
    
    ; COMPARISON
    CMP AL, 0DH
    JE EVALUATE ; IF INP == RETURN -> EVALUATE_BRACKETS()
    
    ; FOR (, {, [ -> PUSH IN STACK
    CMP AL, '('
    JE LEFT
    CMP AL, '['
    JE LEFT
    CMP AL, '{'
    JE LEFT
    
    ; FOR ), }, ] -> CHECK WITH TOP OF STACK
    CMP AL, ')'
    JE RIGHT1   ; ( AND ) ARE 1H AWAY
    CMP AL, ']'
    JE RIGHT2   ; [ AND ] AND { AND } ARE BOTH 2H AWAY
    CMP AL, '}'
    JE RIGHT2
    
    JMP NEXT    ; IF NOT A BRACKET WE TAKE NEXT INPUT
    
    LEFT:       ; PUSH LEFT BRACKET IN STACK
    PUSH AX
    JMP INPUT
    
    RIGHT1:
    CMP CX, SP  ; CHECKS IF STACK IS EMPTY
    JE INVALID  ; IF STACK.EMPTY() -> TOO MANY RIGHT BRACKETS
    POP DX      
    INC DL      ; CHECKS IF THE TOS IS (
    CMP DL, AL
    JZ NEXT     ; IF TOS == ( -> NEXT INPUT
    JNZ INVALID ; ELSE -> MISMATCH BRACKETS
    
    RIGHT2:
    CMP CX, SP  ; CHECKS IF STACK IS EMPTY
    JE INVALID  ; IF STACK.EMPTY() -> TOO MANY RIGHT BRACKETS
    POP DX
    ADD DL, 2   ; CHECKS IF TOS IS { FOR } AND [ FOR ]
    CMP DL, AL  
    JZ NEXT     ; IF TOS == CORRESPONDING OPENING BRACKET -> NEXT INPUT
                ; ELSE -> MISMATCH BRACKETS
    INVALID:
    LEA DX, INV
    MOV AH, 9
    INT 21H
    JMP START
        
    EVALUATE:
    MOV AH, 9
    CMP SP, 0100H
    JE CORRECT  ; IF STACK ADDRESS IS 100H AS DECLARED, THEN BRACKETS ARE BALANCED
    LEA DX, LEF ; ELSE THERE ARE STILL LEFT BRACKETS IN STACK
    INT 21H
    
    MOV BX, CX  
    XCHG CX, SP ; FOR LEFT ERROR SP IS SHIFTED BACK TO ITS ORIGINAL ADDRESS
    MOV CX, BX
    
    JMP CHOICE  ; FOR ASKING IF ANOTHER EQUATION IS TO BE EVALUATED
    
    CORRECT:
    LEA DX, COR
    INT 21H
    
    LEA DX, AGN
    INT 21H

    CHOICE:
    MOV AH, 1
    INT 21H
    MOV BL, AL  
    
    MOV AH, 9
    LEA DX, NEW
    INT 21H
    INT 21H
    
    CMP BL, 'Y'
    JE START
    CMP BL, 'y'
    JE START

    EXIT:
    MOV AH,4CH
    INT 21H
    END MAIN