.MODEL SMALL
.STACK 100H

.DATA
CAP DB 'ENTER ALPHABET NO. '
CNT DB '1'
COL DB ': $'
RES DB 'ALPHABETICALLY SORTED: $'
INV DB 0AH, 0DH, 'INVALID INPUT'
NEW DB '', 0AH, 0DH, '$'
LWR DB 0H   ; CHECKS IF THERE IS ANY LOWERCASE ALPHABET

.CODE
MAIN PROC
    ; INITIALIZING DS
    MOV AX, @DATA
    MOV DS, AX
    
    ; INITIALIZING LOOP
    MOV CX, 2   ; 2 LOOPS FOR 2 INPUTS   
                ; LOOP ALSO DECIDES WHICH BYTE THE INPUT WILL MOVE TO
    
    INPUT:
    LEA DX, CAP
    MOV AH, 9
    INT 21H
    
    MOV AH, 1
    INT 21H
    
    ; CHECKS FOR ALPHABET
    CMP AL, 'A'
    JL INVALID
    CMP AL, 'z'
    JG INVALID
    CMP AL, 'Z'
    JL IF
    ADD LWR, CL ; CHECKS WHICH INPUT IS LOWERCASE (2 = FIRST INP; 1 = SECOND INP)
    CMP AL, 'a'
    JL INVALID
    
    
    IF:
    CMP CX, 2   ; CONDITION TO CHECK WHICH BYTE THE CURRENT INPUT WILL BE ASSIGNED TO
    JE THEN
    MOV BH, AL  ; 2ND INPUT IS STORED IN BH
    JMP ENDIF
    THEN:
    MOV BL, AL  ; 1ST INPUT IS STORED IN BL
    
    ENDIF:
    LEA DX, NEW
    MOV AH, 9
    INT 21H
    
    INC CNT     ; FOR PRINTING PURPOSES
    
    LOOP INPUT
    
    ; RESULT
    RESULT:
    LEA DX, RES
    INT 21H
    CMP BH, BL
    JL REV      ; BH < BL 
    
    
    ; INP1 < INP2
    NORM:
    CMP LWR, 2  ; 1ST INPUT CONTAINS LOWERCASE  
    JE REV      ; ASCII OF LOWERCASE > UPPERCASE -> GOES TO THE REVERSE CONDITION
    MOV AH, 2
    MOV DL, BL
    INT 21H
    MOV DL, 20H
    INT 21H
    MOV DL, BH
    INT 21H
    JMP EXIT
    
    ; INP1 > INP2
    REV:
    CMP LWR, 1  ; 2ND INPUT CONTAINS LOWERCASE
    JE NORM     ; ASCII OF UPPERCASE < LOWERCASE -> GOES TO THE NORMAL CONDITION
    MOV AH, 2
    MOV DL, BH
    INT 21H
    MOV DL, 20H
    INT 21H
    MOV DL, BL
    INT 21H
    JMP EXIT
    
    INVALID:    ; FOR NON ALPHABETIC INPUTS
    LEA DX, INV
    MOV AH, 9
    INT 21H
    JMP INPUT 
    
    ; DOS EXIT
    EXIT:
    MOV AH,4CH
    INT 21H
    END MAIN