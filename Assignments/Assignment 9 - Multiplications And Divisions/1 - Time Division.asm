.MODEL SMALL
.STACK 100H

.DATA
INV DB 0AH, 0DH, 'INVALID INPUT', 0AH, 0DH, 'PLEASE '
INP DB 'ENTER SECONDS IN THE RANGE 0 - 65535: $'
NEW DB 0AH, 0DH, '= $'
HRS DB ' HOURS $'
MNS DB ' MINUTES $'
SCS DB ' SECONDS $'
TEN DW 10
REM DW 0

.CODE
MAIN PROC
    ; INITIALIZING DS
    MOV AX, @DATA
    MOV DS, AX
             
    JMP START
    
    INVALID:
    LEA DX, INV
    MOV AH, 9
    INT 21H
    
    CALL RESET
    
    JMP INPUT
    
    START:
    
    CALL RESET
    
    LEA DX, INP
    MOV AH, 9
    INT 21H
    
    XOR DX, DX
    
    INPUT:
    MOV AH, 1
    INT 21H
    
    COMP:
    
    CMP AL, 0DH
    JE OUTPUT       ; IF INP == RETURN -> OUTPUT()
    
    ; CHECKING DECIMAL
    CMP AL, '0'
    JL INVALID
    
    CMP AL, '9'
    JG INVALID
    
    CALL STORE      ; STORES FULL INPUT IN BX
    
    CMP DL, 0
    JNE INVALID     ; IF INP > FFFF -> INVALID()
        
    JMP INPUT
    
    OUTPUT:
    LEA DX, NEW
    MOV AH, 9
    INT 21H
    
    ; CX = MODIFIER -> 3600 FOR HOUR, 60 FOR MINUTES, 1 FOR SECONDS
    MOV CX, 3600    ; FOR CONVERTING SECONDS TO HOUR
    CALL CONVERT    ; RETURNS* REM = MINUTES
    
    LEA DX, HRS
    MOV AH, 9
    INT 21H
    
    MOV BX, REM     ; REM = MINUTES
    MOV CX, 60      ; FOR CONVERTING MINUTES TO SECONDS
    CALL CONVERT    ; RETURNS* REM = SECONDS
    
    LEA DX, MNS
    MOV AH, 9
    INT 21H
    
    MOV BX, REM     ; REM = SECONDS
    MOV CX, 1       ; FOR CONVERTING SECONDS TO SECONDS
    CALL CONVERT    ; RETURNS* REM = 0
    
    LEA DX, SCS
    MOV AH, 9
    INT 21H
    
    CALL EXIT
    
ENDP MAIN

RESET PROC          ; CLEARS ALL REGISTERS
    XOR AX, AX
    XOR BX, BX
    XOR CX, CX
    XOR DX, DX
    RET
ENDP RESET

STORE PROC
    XOR CX, CX
    MOV CL, AL      ; MOVES THE CURRENT INPUT TO CL
    SUB CL, '0'     ; ASCII TO DECIMAL
    MOV AX, TEN
    MUL BX          ; NUM *= (10 * NUM) 
    ADD AX, CX      ; NUM += INP
    MOV BX, AX      ; BX = NUM   
    RET
ENDP STORE

; CONVERT(CX = CONVERTING NUMBER)
CONVERT PROC
    XOR DX, DX      ; DX NEEDS TO BE CLEARED FOR DIV AND MUL
    
    MOV AX, BX      ; DIVIDEND = STORED NUMBER
    DIV CX          ; DIVISOR = MODIFIER
    MOV REM, DX     ; RETURNS* REM = REMAINDER
    XOR DX, DX      ; DX NEEDS TO BE CLEARED FOR DIV AND MUL
    
    ; THE HIGHEST TIME PRINTABLE IN FFFF IS TWO DIGITS
    DIV TEN         ; FOR 10S PLACE
    MOV CX, DX
    MOV DX, AX
    OR DL, 30H
    MOV AH, 2
    INT 21H
    MOV DX, CX      ; FOP 1S PLACE
    OR DL, 30H
    INT 21H
    RET
ENDP CONVERT

EXIT PROC
    MOV AH,4CH
    INT 21H
ENDP EXIT

END MAIN
    